{"version":3,"names":["_helperPluginUtils","require","_pluginSyntaxThrowExpressions","_core","_default","exports","default","declare","api","assertVersion","name","inherits","syntaxThrowExpressions","visitor","UnaryExpression","path","operator","argument","node","arrow","t","functionExpression","identifier","blockStatement","throwStatement","replaceWith","callExpression"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxThrowExpressions from \"@babel/plugin-syntax-throw-expressions\";\nimport { types as t } from \"@babel/core\";\n\nexport default declare(api => {\n  api.assertVersion(\n    process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH\n      ? PACKAGE_JSON.version\n      : 7,\n  );\n\n  return {\n    name: \"proposal-throw-expressions\",\n    inherits: syntaxThrowExpressions,\n\n    visitor: {\n      UnaryExpression(path) {\n        const { operator, argument } = path.node;\n        if (operator !== \"throw\") return;\n\n        const arrow = t.functionExpression(\n          null,\n          [t.identifier(\"e\")],\n          t.blockStatement([t.throwStatement(t.identifier(\"e\"))]),\n        );\n\n        path.replaceWith(t.callExpression(arrow, [argument]));\n      },\n    },\n  };\n});\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,6BAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AAAyC,IAAAG,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAE1B,IAAAC,0BAAO,EAACC,GAAG,IAAI;EAC5BA,GAAG,CAACC,aAAa,CAGX,CACN,CAAC;EAED,OAAO;IACLC,IAAI,EAAE,4BAA4B;IAClCC,QAAQ,EAAEC,qCAAsB;IAEhCC,OAAO,EAAE;MACPC,eAAeA,CAACC,IAAI,EAAE;QACpB,MAAM;UAAEC,QAAQ;UAAEC;QAAS,CAAC,GAAGF,IAAI,CAACG,IAAI;QACxC,IAAIF,QAAQ,KAAK,OAAO,EAAE;QAE1B,MAAMG,KAAK,GAAGC,WAAC,CAACC,kBAAkB,CAChC,IAAI,EACJ,CAACD,WAAC,CAACE,UAAU,CAAC,GAAG,CAAC,CAAC,EACnBF,WAAC,CAACG,cAAc,CAAC,CAACH,WAAC,CAACI,cAAc,CAACJ,WAAC,CAACE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CACxD,CAAC;QAEDP,IAAI,CAACU,WAAW,CAACL,WAAC,CAACM,cAAc,CAACP,KAAK,EAAE,CAACF,QAAQ,CAAC,CAAC,CAAC;MACvD;IACF;EACF,CAAC;AACH,CAAC,CAAC"}