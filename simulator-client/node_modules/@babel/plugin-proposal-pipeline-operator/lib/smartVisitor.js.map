{"version":3,"names":["_core","require","updateTopicReferenceVisitor","PipelinePrimaryTopicReference","path","replaceWith","t","cloneNode","topicId","PipelineTopicExpression","skip","smartVisitor","BinaryExpression","scope","node","operator","left","right","placeholder","generateUidIdentifierBasedOnNode","push","id","call","isPipelineTopicExpression","get","traverse","expression","callee","isIdentifier","name","sequenceExpression","numericLiteral","callExpression","assignmentExpression","_default","exports","default"],"sources":["../src/smartVisitor.ts"],"sourcesContent":["import { types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\nimport type { Visitor } from \"@babel/traverse\";\n\nconst updateTopicReferenceVisitor: Visitor<{ topicId: t.Identifier }> = {\n  PipelinePrimaryTopicReference(path) {\n    path.replaceWith(t.cloneNode(this.topicId));\n  },\n  PipelineTopicExpression(path) {\n    path.skip();\n  },\n};\n\nconst smartVisitor: Visitor<PluginPass> = {\n  BinaryExpression(path) {\n    const { scope } = path;\n    const { node } = path;\n    const { operator, left, right } = node;\n    if (operator !== \"|>\") return;\n\n    const placeholder = scope.generateUidIdentifierBasedOnNode(left);\n    scope.push({ id: placeholder });\n\n    let call;\n    if (t.isPipelineTopicExpression(right)) {\n      path\n        .get(\"right\")\n        .traverse(updateTopicReferenceVisitor, { topicId: placeholder });\n\n      call = right.expression;\n    } else {\n      // PipelineBareFunction\n      let callee = (right as t.CallExpression).callee;\n      if (t.isIdentifier(callee, { name: \"eval\" })) {\n        callee = t.sequenceExpression([t.numericLiteral(0), callee]);\n      }\n\n      call = t.callExpression(callee, [t.cloneNode(placeholder)]);\n    }\n\n    path.replaceWith(\n      t.sequenceExpression([\n        t.assignmentExpression(\n          \"=\",\n          t.cloneNode(placeholder),\n          // left must not be a PrivateName because operator is not \"in\"\n          left as t.Expression,\n        ),\n        call,\n      ]),\n    );\n  },\n};\n\nexport default smartVisitor;\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAIA,MAAMC,2BAA+D,GAAG;EACtEC,6BAA6BA,CAACC,IAAI,EAAE;IAClCA,IAAI,CAACC,WAAW,CAACC,WAAC,CAACC,SAAS,CAAC,IAAI,CAACC,OAAO,CAAC,CAAC;EAC7C,CAAC;EACDC,uBAAuBA,CAACL,IAAI,EAAE;IAC5BA,IAAI,CAACM,IAAI,CAAC,CAAC;EACb;AACF,CAAC;AAED,MAAMC,YAAiC,GAAG;EACxCC,gBAAgBA,CAACR,IAAI,EAAE;IACrB,MAAM;MAAES;IAAM,CAAC,GAAGT,IAAI;IACtB,MAAM;MAAEU;IAAK,CAAC,GAAGV,IAAI;IACrB,MAAM;MAAEW,QAAQ;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGH,IAAI;IACtC,IAAIC,QAAQ,KAAK,IAAI,EAAE;IAEvB,MAAMG,WAAW,GAAGL,KAAK,CAACM,gCAAgC,CAACH,IAAI,CAAC;IAChEH,KAAK,CAACO,IAAI,CAAC;MAAEC,EAAE,EAAEH;IAAY,CAAC,CAAC;IAE/B,IAAII,IAAI;IACR,IAAIhB,WAAC,CAACiB,yBAAyB,CAACN,KAAK,CAAC,EAAE;MACtCb,IAAI,CACDoB,GAAG,CAAC,OAAO,CAAC,CACZC,QAAQ,CAACvB,2BAA2B,EAAE;QAAEM,OAAO,EAAEU;MAAY,CAAC,CAAC;MAElEI,IAAI,GAAGL,KAAK,CAACS,UAAU;IACzB,CAAC,MAAM;MAEL,IAAIC,MAAM,GAAIV,KAAK,CAAsBU,MAAM;MAC/C,IAAIrB,WAAC,CAACsB,YAAY,CAACD,MAAM,EAAE;QAAEE,IAAI,EAAE;MAAO,CAAC,CAAC,EAAE;QAC5CF,MAAM,GAAGrB,WAAC,CAACwB,kBAAkB,CAAC,CAACxB,WAAC,CAACyB,cAAc,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC,CAAC;MAC9D;MAEAL,IAAI,GAAGhB,WAAC,CAAC0B,cAAc,CAACL,MAAM,EAAE,CAACrB,WAAC,CAACC,SAAS,CAACW,WAAW,CAAC,CAAC,CAAC;IAC7D;IAEAd,IAAI,CAACC,WAAW,CACdC,WAAC,CAACwB,kBAAkB,CAAC,CACnBxB,WAAC,CAAC2B,oBAAoB,CACpB,GAAG,EACH3B,WAAC,CAACC,SAAS,CAACW,WAAW,CAAC,EAExBF,IACF,CAAC,EACDM,IAAI,CACL,CACH,CAAC;EACH;AACF,CAAC;AAAC,IAAAY,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEazB,YAAY"}