{"version":3,"names":["_core","require","_buildOptimizedSequenceExpression","minimalVisitor","BinaryExpression","path","scope","node","operator","left","right","placeholder","generateUidIdentifierBasedOnNode","call","t","callExpression","cloneNode","replaceWith","buildOptimizedSequenceExpression","_default","exports","default"],"sources":["../src/minimalVisitor.ts"],"sourcesContent":["import { types as t, type PluginPass } from \"@babel/core\";\nimport type { NodePath, Visitor } from \"@babel/traverse\";\nimport buildOptimizedSequenceExpression from \"./buildOptimizedSequenceExpression.ts\";\n\nconst minimalVisitor: Visitor<PluginPass> = {\n  BinaryExpression(path) {\n    const { scope, node } = path;\n    const { operator, left, right } = node;\n    if (operator !== \"|>\") return;\n\n    const placeholder = scope.generateUidIdentifierBasedOnNode(left);\n\n    const call = t.callExpression(right, [t.cloneNode(placeholder)]);\n    path.replaceWith(\n      buildOptimizedSequenceExpression({\n        placeholder,\n        call,\n        path: path as NodePath<t.BinaryExpression & { operator: \"|>\" }>,\n      }),\n    );\n  },\n};\n\nexport default minimalVisitor;\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAEA,IAAAC,iCAAA,GAAAD,OAAA;AAEA,MAAME,cAAmC,GAAG;EAC1CC,gBAAgBA,CAACC,IAAI,EAAE;IACrB,MAAM;MAAEC,KAAK;MAAEC;IAAK,CAAC,GAAGF,IAAI;IAC5B,MAAM;MAAEG,QAAQ;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGH,IAAI;IACtC,IAAIC,QAAQ,KAAK,IAAI,EAAE;IAEvB,MAAMG,WAAW,GAAGL,KAAK,CAACM,gCAAgC,CAACH,IAAI,CAAC;IAEhE,MAAMI,IAAI,GAAGC,WAAC,CAACC,cAAc,CAACL,KAAK,EAAE,CAACI,WAAC,CAACE,SAAS,CAACL,WAAW,CAAC,CAAC,CAAC;IAChEN,IAAI,CAACY,WAAW,CACd,IAAAC,yCAAgC,EAAC;MAC/BP,WAAW;MACXE,IAAI;MACJR,IAAI,EAAEA;IACR,CAAC,CACH,CAAC;EACH;AACF,CAAC;AAAC,IAAAc,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEalB,cAAc"}